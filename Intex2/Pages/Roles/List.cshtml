@page
@model ListModel
<br />
    <div style="max-width:auto;" class="col-md-13">
        <table style="width:100%; height:100%;" class="table bg-white table-striped table-hover table-sm table-bordered table-responsive" >
            <tr>
                <th class="text-center"><h3>Title</h3></th>
                <th width="80%" class="text-center"><h3>Members</h3></th>
                <th width="100%" class="text-center"><h3>Edit</h3></th>
            </tr>
            @if (Model.Roles.Count() == 0)
            {
                <tr><td colspan="8" class="text-center">No Roles</td></tr>
            }
            else
            {
                foreach (IdentityRole role in Model.Roles)
                {
                    <tr>
                        <td><h5>@role.Name</h5></td>
                        <td class="text-center"><i>@(await Model.GetMembersString(role.Name))</i></td>
                        <td class="text-center">
                            <form asp-page="List" method="post">
                                <input type="hidden" name="Id" value="@role.Id" />
                                <a class="btn btn-sm btn-warning" asp-page="Editor"
                                   asp-route-id="@role.Id" asp-route-mode="edit">Edit</a>
                                @if(role.Name != "Admins")
                                {
                                   <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                                }
                                </form>
                        </td>
                    </tr>
                }
            }
        </table>
        <a class="btn btn-primary" asp-page="create">Create A New Role</a>
    </div>

    @functions {

        public class ListModel : AdminPageModel
        {
            public UserManager<IdentityUser> UserManager;
            public RoleManager<IdentityRole> RoleManager;

            public ListModel(UserManager<IdentityUser> userManager,
                    RoleManager<IdentityRole> roleManager)
            {
                UserManager = userManager;
                RoleManager = roleManager;
            }

            public IEnumerable<IdentityRole> Roles { get; set; }

            public void OnGet()
            {
                Roles = RoleManager.Roles;
            }

            public async Task<string> GetMembersString(string role)
            {
                IEnumerable<IdentityUser> users
                    = (await UserManager.GetUsersInRoleAsync(role));
                string result = users.Count() == 0
                    ? "No members"
                    : string.Join(", ", users.Take(3).Select(u => u.UserName).ToArray());
                return users.Count() > 3 ? $"{result}, (plus others)" : result;
            }

            public async Task<IActionResult> OnPostAsync(string id)
            {
                IdentityRole role = await RoleManager.FindByIdAsync(id);
                await RoleManager.DeleteAsync(role);
                return RedirectToPage();
            }
        }
    }
